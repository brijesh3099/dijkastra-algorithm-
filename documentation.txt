Dijkstra's Shortest Path Algorithm - Documentation
Introduction:
Dijkstra's algorithm serves as a widely-used technique for determining the shortest path between nodes within a graph, particularly in scenarios where all edge weights are non-negative. It functions by iteratively selecting the vertex with the smallest distance from the source vertex and updating the distances of its adjacent vertices. This iterative process persists until all vertices are visited.

Implementation Details:
The program is implemented in C, employing a structure-based approach.
Within the Graph structure, methods are provided for initializing the graph, computing shortest paths, and presenting results.
Input is accepted in the form of an adjacency matrix, where graph[i][j] denotes the weight of the edge connecting vertices i and j.
Dijkstra's algorithm is realized through the computeShortestPath function.
The displayResults function outputs the shortest distances from the source vertex to all other vertices.
Insights:
Dijkstra's algorithm is categorized as a greedy algorithm, ensuring the shortest path from the source vertex to every other vertex in a graph.
It manages a set of vertices for which the shortest distance from the source is already determined.
The algorithm iteratively identifies the vertex with the smallest distance from the source among those not yet processed, updates the distances of its neighboring vertices, and includes it in the set of processed vertices.
This process persists until all vertices are processed.
Results:
Upon execution with the provided graph, the program accurately computes the shortest distances from the source vertex to all other vertices.
Conclusion:
Dijkstra's algorithm stands as an effective means for identifying shortest paths within weighted graphs. Grasping its underlying principles and implementation nuances is pivotal for addressing various graph-related challenges.
